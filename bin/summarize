#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import argparse

from datamining import summarizer


HEADERS = {
    "User-Agent": "Summarize (Automatic text summarizer) Version/%s" % (
        summarizer.__version__,
    ),
}


parser = argparse.ArgumentParser(
    description='Summarize - Automatic text summarizer.')
parser.add_argument('source', metavar='[URI|PATH]',
                    help='URI/PATH of the text to be summarized')
parser.add_argument('--lang', dest='lang', default='en')
parser.add_argument('--version', action='version',
                    version='%(prog)s v{}.'.format(summarizer.__version__))
args = parser.parse_args()


class Parser(object):

    @classmethod
    def parse(cls, source):
        if source.startswith("http") or source.startswith("www"):
            return UrlParser.parse(source)


class FileParser(Parser):

    @classmethod
    def parse(cls, path):
        stream = open(path)
        return stream.read()


def find_likely_body(b):
    """Find the tag with the most directly-descended <p> tags"""
    return max(b.find_all(),
               key=lambda t: (len(t.find_all('p', recursive=False)) +
                              len(t.find_all('div', recursive=False)))
               )


class UrlParser(Parser):

    @classmethod
    def parse(cls, url):
        import bs4
        import requests

        html = bs4.BeautifulSoup(requests.get(url, headers=HEADERS).text)
        b = find_likely_body(html)
        text = ' '.join(map(lambda p: p.text, b.find_all('p')))
        return text


def help(exit_code=0):
    """Print help and exit."""
    args.print_help()
    sys.exit(exit_code)


def clean_sentence(sentence):
    sentence = sentence.strip()
    sentence = sentence.replace('\n', ' ').replace('\t', ' ')
    return sentence


def main():
    language_maps = {
        "en": "english",
        "fr": "french",
        "ar": "arabic",
    }
    lang = language_maps.get(args.lang, args.lang)

    text = Parser.parse(args.source)
    summarizer_obj = summarizer.Summarizer(lang=lang)
    important_sentences = summarizer_obj.summarize(text)
    important_sentences = map(clean_sentence, important_sentences)
    print(''.join(important_sentences))
    sys.exit(0)


if __name__ == '__main__':
    import sys
    main()
